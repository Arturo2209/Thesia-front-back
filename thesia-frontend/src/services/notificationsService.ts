import { apiService } from './api';
import type { 
  NotificationsApiResponse, 
  MarkAsReadResponse,
  NotificationFilter,
  NotificationData 
} from '../components/Notifications/types/notifications.types';

// üì° SERVICIO PARA NOTIFICACIONES
export const notificationsService = {
  /**
   * üìã Obtener notificaciones del usuario actual
   */
  async getMyNotifications(
    page: number = 1, 
    limit: number = 20, 
    filter?: NotificationFilter
  ): Promise<NotificationsApiResponse> {
    try {
      console.log('üîî [NotificationsService] Obteniendo notificaciones...', { page, limit, filter });

      const params = new URLSearchParams({
        page: page.toString(),
        limit: limit.toString()
      });

      // Aplicar filtros si existen
      if (filter?.type && filter.type !== 'all') {
        params.append('tipo', filter.type);
      }
      if (filter?.priority && filter.priority !== 'all') {
        params.append('prioridad', filter.priority);
      }
      if (filter?.isRead !== 'all' && typeof filter?.isRead === 'boolean') {
        params.append('leido', filter.isRead ? '1' : '0');
      }
      if (filter?.dateRange?.from) {
        params.append('fecha_desde', filter.dateRange.from);
      }
      if (filter?.dateRange?.to) {
        params.append('fecha_hasta', filter.dateRange.to);
      }

      // ‚úÖ USAR apiService.get con type assertion
      const response = await apiService.get(`/notifications?${params.toString()}`) as any;
      
      console.log('‚úÖ [NotificationsService] Notificaciones obtenidas:', response);
      
      // üîß Verificar estructura de la respuesta
      if (response && typeof response === 'object') {
        const typedResponse = response as NotificationsApiResponse;
        return typedResponse;
      } else {
        console.error('‚ùå Respuesta del servidor tiene formato inesperado:', response);
        throw new Error('Formato de respuesta inv√°lido');
      }

    } catch (error) {
      console.error('‚ùå [NotificationsService] Error obteniendo notificaciones:', error);
      throw error;
    }
  },

  /**
   * üìñ Marcar una notificaci√≥n como le√≠da
   */
  async markAsRead(notificationId: number): Promise<MarkAsReadResponse> {
    try {
      console.log('üìñ [NotificationsService] Marcando notificaci√≥n como le√≠da:', notificationId);

      // ‚úÖ USAR PUT en lugar de PATCH (como en tu estructura)
      const response = await apiService.put(`/notifications/${notificationId}/read`, {
        leido: 1
      }) as any;
      
      console.log('‚úÖ [NotificationsService] Notificaci√≥n marcada como le√≠da:', response);
      
      return {
        success: true,
        message: 'Notificaci√≥n marcada como le√≠da',
        updatedCount: 1
      };

    } catch (error) {
      console.error('‚ùå [NotificationsService] Error marcando notificaci√≥n como le√≠da:', error);
      
      return {
        success: false,
        message: error instanceof Error ? error.message : 'Error marcando notificaci√≥n como le√≠da',
        updatedCount: 0
      };
    }
  },

  /**
   * üìñ Marcar m√∫ltiples notificaciones como le√≠das
   */
  async markMultipleAsRead(notificationIds: number[]): Promise<MarkAsReadResponse> {
    try {
      console.log('üìñ [NotificationsService] Marcando m√∫ltiples notificaciones como le√≠das:', notificationIds);

      // ‚úÖ USAR PUT con array de IDs
      const response = await apiService.put('/notifications/read-multiple', {
        notificationIds,
        leido: 1
      }) as any;
      
      console.log('‚úÖ [NotificationsService] Notificaciones marcadas como le√≠das:', response);
      
      return {
        success: true,
        message: 'Notificaciones marcadas como le√≠das',
        updatedCount: notificationIds.length
      };

    } catch (error) {
      console.error('‚ùå [NotificationsService] Error marcando notificaciones como le√≠das:', error);
      
      return {
        success: false,
        message: error instanceof Error ? error.message : 'Error marcando notificaciones como le√≠das',
        updatedCount: 0
      };
    }
  },

  /**
   * üìñ Marcar todas las notificaciones como le√≠das
   */
  async markAllAsRead(): Promise<MarkAsReadResponse> {
    try {
      console.log('üìñ [NotificationsService] Marcando todas las notificaciones como le√≠das...');

      // ‚úÖ USAR PUT para marcar todas
      const response = await apiService.put('/notifications/read-all', {
        leido: 1
      }) as any;
      
      console.log('‚úÖ [NotificationsService] Todas las notificaciones marcadas como le√≠das:', response);
      
      return {
        success: true,
        message: 'Todas las notificaciones marcadas como le√≠das',
        updatedCount: response.updatedCount || 0
      };

    } catch (error) {
      console.error('‚ùå [NotificationsService] Error marcando todas las notificaciones como le√≠das:', error);
      
      return {
        success: false,
        message: error instanceof Error ? error.message : 'Error marcando todas las notificaciones como le√≠das',
        updatedCount: 0
      };
    }
  },

  /**
   * üóëÔ∏è Eliminar una notificaci√≥n
   */
  async deleteNotification(notificationId: number): Promise<{ success: boolean; message: string }> {
    try {
      console.log('üóëÔ∏è [NotificationsService] Eliminando notificaci√≥n:', notificationId);

      // ‚úÖ USAR apiService.delete
      const response = await apiService.delete(`/notifications/${notificationId}`) as any;
      
      console.log('‚úÖ [NotificationsService] Notificaci√≥n eliminada:', response);
      
      return {
        success: true,
        message: 'Notificaci√≥n eliminada exitosamente'
      };

    } catch (error) {
      console.error('‚ùå [NotificationsService] Error eliminando notificaci√≥n:', error);
      
      return {
        success: false,
        message: error instanceof Error ? error.message : 'Error eliminando notificaci√≥n'
      };
    }
  },

  /**
   * üîî Obtener contador de notificaciones no le√≠das
   */
  async getUnreadCount(): Promise<{ success: boolean; unreadCount: number }> {
    try {
      console.log('üîî [NotificationsService] Obteniendo contador de no le√≠das...');

      // ‚úÖ USAR apiService.get
      const response = await apiService.get('/notifications/unread-count') as any;
      
      console.log('‚úÖ [NotificationsService] Contador obtenido:', response);
      
      return {
        success: true,
        unreadCount: response.unreadCount || 0
      };

    } catch (error) {
      console.error('‚ùå [NotificationsService] Error obteniendo contador:', error);
      
      return {
        success: false,
        unreadCount: 0
      };
    }
  },

  /**
   * üîî Crear una nueva notificaci√≥n
   * üéØ M√âTODO CORREGIDO PARA INTEGRACIONES AUTOM√ÅTICAS
   */
  async createNotification(notificationData: {
    id_usuario: number;
    mensaje: string;
    tipo: 'reunion' | 'plazo' | 'comentario' | 'estado' | 'general' | 'documento';
    prioridad?: 'alta' | 'media' | 'baja';
    id_referencia?: number | undefined; // ‚Üê CORREGIDO: undefined en lugar de number
    tipo_referencia?: 'reunion' | 'documento' | 'tesis' | 'comentario' | undefined; // ‚Üê CORREGIDO
  }): Promise<{ success: boolean; message: string; notification?: NotificationData }> {
    try {
      console.log('üîî [NotificationsService] Creando nueva notificaci√≥n:', notificationData);

      // üîß LIMPIAR DATOS ANTES DE ENVIAR
      const cleanData = {
        id_usuario: notificationData.id_usuario,
        mensaje: notificationData.mensaje,
        tipo: notificationData.tipo,
        prioridad: notificationData.prioridad || 'media',
        id_referencia: notificationData.id_referencia || null, // ‚Üê CONVERTIR undefined a null
        tipo_referencia: notificationData.tipo_referencia || null // ‚Üê CONVERTIR undefined a null
      };

      console.log('üßπ [NotificationsService] Datos limpiados para env√≠o:', cleanData);

      // ‚úÖ USAR apiService.post
      const response = await apiService.post('/notifications', cleanData) as any;
      
      console.log('‚úÖ [NotificationsService] Notificaci√≥n creada exitosamente:', response);
      
      return {
        success: true,
        message: 'Notificaci√≥n creada exitosamente',
        notification: response.notification || null
      };

    } catch (error) {
      console.error('‚ùå [NotificationsService] Error creando notificaci√≥n:', error);
      
      return {
        success: false,
        message: error instanceof Error ? error.message : 'Error creando notificaci√≥n'
      };
    }
  },

  /**
   * üß™ Obtener estad√≠sticas de notificaciones (para admin/debug)
   */
  async getNotificationStats(): Promise<{
    success: boolean;
    stats?: {
      total: number;
      unread: number;
      byType: Record<NotificationData['tipo'], number>;
      byPriority: Record<NotificationData['prioridad'], number>;
      recent: number; // √∫ltimas 24h
    };
    message: string;
  }> {
    try {
      console.log('üìä [NotificationsService] Obteniendo estad√≠sticas de notificaciones...');

      // ‚úÖ USAR apiService.get
      const response = await apiService.get('/notifications/stats') as any;
      
      console.log('‚úÖ [NotificationsService] Estad√≠sticas obtenidas:', response);
      
      return {
        success: true,
        stats: response.stats || {},
        message: 'Estad√≠sticas obtenidas exitosamente'
      };

    } catch (error) {
      console.error('‚ùå [NotificationsService] Error obteniendo estad√≠sticas:', error);
      
      return {
        success: false,
        message: error instanceof Error ? error.message : 'Error obteniendo estad√≠sticas'
      };
    }
  },

  /**
   * üîÑ Polling para notificaciones en tiempo real (alternativa a WebSockets)
   */
  async checkForNewNotifications(lastCheck: string): Promise<{
    success: boolean;
    hasNew: boolean;
    newNotifications: NotificationData[];
    unreadCount: number;
    message: string;
  }> {
    try {
      console.log('üîÑ [NotificationsService] Verificando nuevas notificaciones desde:', lastCheck);

      // ‚úÖ USAR apiService.get con par√°metros
      const response = await apiService.get(`/notifications/check-new?since=${encodeURIComponent(lastCheck)}`) as any;
      
      if (response.hasNew) {
        console.log('üÜï [NotificationsService] Nuevas notificaciones encontradas:', response.newNotifications?.length || 0);
      }
      
      return {
        success: true,
        hasNew: response.hasNew || false,
        newNotifications: response.newNotifications || [],
        unreadCount: response.unreadCount || 0,
        message: 'Verificaci√≥n completada'
      };

    } catch (error) {
      console.error('‚ùå [NotificationsService] Error verificando nuevas notificaciones:', error);
      
      return {
        success: false,
        hasNew: false,
        newNotifications: [],
        unreadCount: 0,
        message: error instanceof Error ? error.message : 'Error verificando nuevas notificaciones'
      };
    }
  }
};

export default notificationsService;